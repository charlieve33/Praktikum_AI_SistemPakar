# -*- coding: utf-8 -*-
"""Backward_Chain.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1FGaFfFyCPlWfX0xEQG8wKX4IaMge5Ijs
"""

def backward_chaining(goal, facts, rules):
  if goal in facts:
    return True
  for rule in rules:
    if rule["then"] == goal:
      if all(backward_chaining(cond, facts, rules) for cond in rule ["if"]):
        return True
  return False

facts = {"likes_computer", "solves_problems", "likes_to_analyze"}
rules = [
    {"if": {"likes_computer", "solves_problems"}, "then": "should_be_engineer"},
    {"if": {"should_be_engineer", "likes_programming"}, "then": "software_engineer"},
    {"if": {"should_be_engineer", "likes_to_desaign"}, "then": "UI/UX_engineer"},
    {"if": {"should_be_engineer", "likes_to_analyze"}, "then": "Data_engineer"}
]

goal = "Data_engineer"
result = backward_chaining(goal, facts, rules)
print(f"Is '(goal)' provable? -->", result)

def backward_chaining(goal, facts, rules):
  if goal in facts:
    return True
  for rule in rules:
    if rule["then"] == goal:
      if all(backward_chaining(cond, facts, rules) for cond in rule ["if"]):
        return True
  return False

facts = {"has_feathers", "cannot_fly"}
rules = [
    {"if": {"has_feathers"}, "then": "is_bird"},
    {"if": {"has_small_wings", "is_bird"}, "then": "cannot_fly"},
    {"if": {"cannot_fly", "is_bird"}, "then": "is_penguin"}
]

goal = "is_penguin"
result = backward_chaining(goal, facts, rules)
print(f"Is '(goal)' provable? -->", result)